# SkillDock - Skill Swapping Platform

SkillDock is a modern web application built with Next.js that allows users to connect with each other to trade or swap skills. Whether you want to learn a new programming language in exchange for design lessons or trade creative writing tips for marketing knowledge, SkillDock provides the platform to make it happen.

The application features a sleek, premium dark theme and leverages AI to provide intelligent skill suggestions to users based on their existing abilities and interests.

## Features

- **Browse & Search:** Discover other members on the platform. You can search for users by their name or the skills they offer.
- **User Profiles:** Create and manage your public profile, including your name, location, availability, and profile picture.
- **Skill Management:** Easily add or remove the skills you offer and the skills you want to learn.
- **AI Skill Suggestions:** Get personalized skill recommendations powered by Google's Gemini model through Genkit, based on your current skills and interests.
- **Skill Swap System:**
    - Send swap requests to other users, proposing an exchange of skills.
    - Manage incoming, outgoing, active, and completed/rejected swaps in a dedicated dashboard.
    - Accept or reject incoming requests.
- **Responsive Design:** A fully responsive interface that works seamlessly on both desktop and mobile devices.

## Tech Stack

This project is built with a modern, type-safe, and efficient technology stack:

- **Framework:** [Next.js](https://nextjs.org/) (with App Router)
- **UI Library:** [React](https://react.dev/)
- **Language:** [TypeScript](https://www.typescriptlang.org/)
- **Styling:** [Tailwind CSS](https://tailwindcss.com/)
- **UI Components:** [ShadCN UI](https://ui.shadcn.com/)
- **Generative AI:** [Firebase Genkit](https://firebase.google.com/docs/genkit) with Google's Gemini model
- **Icons:** [Lucide React](https://lucide.dev/guide/packages/lucide-react)
- **Forms:** [React Hook Form](https://react-hook-form.com/) with [Zod](https://zod.dev/) for validation

## Getting Started

Follow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

- [Node.js](https://nodejs.org/en) (v18 or later recommended)
- [npm](https://www.npmjs.com/get-npm) or [yarn](https://classic.yarnpkg.com/en/docs/install/)

### Installation & Setup

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY_NAME.git
    cd YOUR_REPOSITORY_NAME
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```
    or
    ```bash
    yarn install
    ```

3.  **Set up environment variables:**
    Create a `.env.local` file in the root of your project by copying the example file:
    ```bash
    cp .env .env.local
    ```
    You will need to add your Google AI API key to this file to enable the AI features.
    ```env
    GOOGLE_API_KEY=your_google_ai_api_key_here
    ```
    You can obtain a key from the [Google AI Studio](https://aistudio.google.com/app/apikey).

### Running the Application

1.  **Start the Genkit development server:**
    The AI flows run in a separate process. Open a new terminal window and run:
    ```bash
    npm run genkit:dev
    ```
    This will start the Genkit server, typically on port 3400.

2.  **Start the Next.js development server:**
    In your original terminal window, run:
    ```bash
    npm run dev
    ```
    This will start the main application, typically on `http://localhost:9002`.

3.  **Open the app:**
    Navigate to [http://localhost:9002](http://localhost:9002) in your web browser to see the application in action.

## Project Structure

The project follows a standard Next.js App Router structure:

-   `src/app/`: Contains all the pages and layouts of the application.
-   `src/ai/`: Home for all Genkit-related code, including AI flows.
-   `src/components/`: Shared React components, including UI components from ShadCN.
-   `src/lib/`: Contains utility functions, data sources (`data.ts`), and type definitions (`types.ts`).
-   `src/hooks/`: Custom React hooks used throughout the application.
-   `public/`: Static assets like images.

Your project is now well-documented and ready to be pushed to your GitHub repository! Let me know if you need anything else.
